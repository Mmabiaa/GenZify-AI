
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Slider } from "@/components/ui/slider";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Sparkles, Copy, FileText, Loader2, ImagePlus, Music, Code, RotateCcw } from "lucide-react";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";

type ContentType = "text" | "image" | "code";

export default function ContentGenerator() {
  const [prompt, setPrompt] = useState("");
  const [generatedContent, setGeneratedContent] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [contentType, setContentType] = useState<ContentType>("text");
  const [tone, setTone] = useState("professional");
  const [creativity, setCreativity] = useState([50]);
  const { toast } = useToast();
  
  const generateContent = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!prompt.trim()) {
      toast({
        title: "Empty prompt",
        description: "Please enter a prompt to generate content.",
        variant: "destructive",
      });
      return;
    }
    
    setIsGenerating(true);
    
    // Simulate generation delay
    setTimeout(() => {
      let result = "";
      
      if (contentType === "text") {
        const toneMapping = {
          professional: "This is a professionally generated text based on your prompt. It is clear, concise, and uses industry-standard terminology appropriate for business contexts.",
          casual: "Hey there! Here's a casual take on what you asked for. It's friendly, conversational, and pretty relaxed overall.",
          enthusiastic: "WOW! I'm SUPER excited to share this AMAZING content with you! It's full of energy and enthusiasm that will definitely grab attention!",
          formal: "Herein lies a formal response to your query, characterized by sophisticated language, proper structure, and a distinct lack of colloquialisms.",
          humorous: "Why did the AI cross the road? To get to the other algorithm! Jokes aside (or not), here's a funny take on your request that should give you a chuckle."
        };
        
        result = `${toneMapping[tone as keyof typeof toneMapping]}\n\n`;
        result += `Your prompt was about "${prompt}", and this response is generated with ${creativity[0]}% creativity level. In a production environment, this would be generated by an actual AI model.`;
      } else if (contentType === "image") {
        result = "Image generation is simulated in this demo. In a production environment, this would connect to an image generation API like DALL-E or Midjourney to create images based on your prompt.";
      } else if (contentType === "code") {
        result = `// Generated code sample based on prompt: ${prompt}\n\n`;
        result += `function generateSolution() {\n  // This is a simulated code response\n  // In production, this would be generated by an actual AI model\n  console.log("Implementing solution for: ${prompt}");\n  \n  // Your implementation would go here\n  return "Solution implemented with ${creativity[0]}% creativity";\n}\n\n// Call the function\ngenerateSolution();`;
      }
      
      setGeneratedContent(result);
      setIsGenerating(false);
      
      toast({
        title: "Content generated",
        description: "Your content has been generated successfully.",
      });
    }, 2000);
  };
  
  const handleCopyToClipboard = () => {
    navigator.clipboard.writeText(generatedContent);
    toast({
      title: "Copied to clipboard",
      description: "Content has been copied to your clipboard.",
    });
  };
  
  const handleReset = () => {
    setPrompt("");
    setGeneratedContent("");
    setTone("professional");
    setCreativity([50]);
  };
  
  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      <main className="flex-1 container mx-auto px-4 py-8">
        <div className="max-w-5xl mx-auto">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl md:text-3xl font-bold">AI Content Generator</h1>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card className="md:col-span-1">
              <CardHeader>
                <CardTitle>Content Settings</CardTitle>
                <CardDescription>Configure your content generation preferences</CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={generateContent} className="space-y-6">
                  <div className="space-y-2">
                    <Label htmlFor="content-type">Content Type</Label>
                    <Tabs 
                      value={contentType} 
                      onValueChange={(value) => setContentType(value as ContentType)} 
                      className="w-full"
                    >
                      <TabsList className="grid grid-cols-3 w-full">
                        <TabsTrigger value="text" className="flex items-center gap-2">
                          <FileText className="h-4 w-4" /> Text
                        </TabsTrigger>
                        <TabsTrigger value="image" className="flex items-center gap-2">
                          <ImagePlus className="h-4 w-4" /> Image
                        </TabsTrigger>
                        <TabsTrigger value="code" className="flex items-center gap-2">
                          <Code className="h-4 w-4" /> Code
                        </TabsTrigger>
                      </TabsList>
                    </Tabs>
                  </div>
                  
                  {contentType === "text" && (
                    <div className="space-y-2">
                      <Label htmlFor="tone">Tone</Label>
                      <Select value={tone} onValueChange={setTone}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select tone" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="professional">Professional</SelectItem>
                          <SelectItem value="casual">Casual</SelectItem>
                          <SelectItem value="enthusiastic">Enthusiastic</SelectItem>
                          <SelectItem value="formal">Formal</SelectItem>
                          <SelectItem value="humorous">Humorous</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  )}
                  
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <Label htmlFor="creativity">Creativity</Label>
                      <span className="text-sm text-muted-foreground">{creativity[0]}%</span>
                    </div>
                    <Slider
                      id="creativity"
                      min={0}
                      max={100}
                      step={1}
                      value={creativity}
                      onValueChange={setCreativity}
                    />
                    <div className="flex justify-between text-xs text-muted-foreground">
                      <span>Precise</span>
                      <span>Balanced</span>
                      <span>Creative</span>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="prompt">Your Prompt</Label>
                    <Textarea
                      id="prompt"
                      placeholder={
                        contentType === "text"
                          ? "Enter a prompt for text generation..."
                          : contentType === "image"
                          ? "Describe the image you want to generate..."
                          : "Describe the code you want to generate..."
                      }
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      className="min-h-[100px]"
                    />
                  </div>
                  
                  <div className="flex space-x-2">
                    <Button
                      type="submit"
                      className="w-full"
                      disabled={isGenerating || !prompt.trim()}
                    >
                      {isGenerating ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generating
                        </>
                      ) : (
                        <>
                          <Sparkles className="mr-2 h-4 w-4" /> Generate
                        </>
                      )}
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleReset}
                      disabled={isGenerating}
                    >
                      <RotateCcw className="h-4 w-4" />
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
            
            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>Generated Content</CardTitle>
                <CardDescription>
                  Your AI-generated content will appear here
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isGenerating ? (
                  <div className="h-96 flex items-center justify-center">
                    <div className="flex flex-col items-center">
                      <Loader2 className="h-10 w-10 animate-spin text-primary" />
                      <p className="mt-4 text-foreground/70">
                        Generating your content...
                      </p>
                    </div>
                  </div>
                ) : generatedContent ? (
                  <div className="bg-muted rounded-md p-4 min-h-96 max-h-96 overflow-y-auto">
                    <pre className="whitespace-pre-wrap font-sans text-sm">
                      {generatedContent}
                    </pre>
                  </div>
                ) : (
                  <div className="h-96 flex items-center justify-center border border-dashed rounded-md">
                    <div className="text-center p-4">
                      <Sparkles className="mx-auto h-8 w-8 text-muted-foreground mb-3" />
                      <h3 className="text-lg font-medium">Nothing generated yet</h3>
                      <p className="text-sm text-muted-foreground max-w-xs mt-2">
                        Enter a prompt and click generate to create AI content
                      </p>
                    </div>
                  </div>
                )}
              </CardContent>
              {generatedContent && (
                <CardFooter>
                  <Button variant="outline" onClick={handleCopyToClipboard}>
                    <Copy className="mr-2 h-4 w-4" /> Copy to Clipboard
                  </Button>
                </CardFooter>
              )}
            </Card>
          </div>
          
          <div className="mt-12">
            <Card>
              <CardHeader>
                <CardTitle>How It Works</CardTitle>
              </CardHeader>
              <CardContent className="grid gap-6 sm:grid-cols-3">
                <div className="flex flex-col items-center text-center p-4">
                  <div className="bg-primary/10 p-3 rounded-full mb-4">
                    <FileText className="h-6 w-6 text-primary" />
                  </div>
                  <h3 className="font-medium mb-2">1. Enter Your Prompt</h3>
                  <p className="text-sm text-muted-foreground">
                    Describe what you want to create in natural language
                  </p>
                </div>
                
                <div className="flex flex-col items-center text-center p-4">
                  <div className="bg-primary/10 p-3 rounded-full mb-4">
                    <Sparkles className="h-6 w-6 text-primary" />
                  </div>
                  <h3 className="font-medium mb-2">2. AI Generates Content</h3>
                  <p className="text-sm text-muted-foreground">
                    Our AI models transform your prompt into high-quality content
                  </p>
                </div>
                
                <div className="flex flex-col items-center text-center p-4">
                  <div className="bg-primary/10 p-3 rounded-full mb-4">
                    <Copy className="h-6 w-6 text-primary" />
                  </div>
                  <h3 className="font-medium mb-2">3. Use & Edit</h3>
                  <p className="text-sm text-muted-foreground">
                    Copy, edit or save the generated content for your projects
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      
      <Footer />
    </div>
  );
}
